
PUC-Minas - ICEI - Ciência da Computação
Algoritmos e Estruturas de Dados I - Aula 2023-2_005
Anotações
___

Resumo da semana

Introdução à linguagem de programação C


Alternativas

1. Simples
   
   C/C++
   
   if ( condicao )
   {  // condicao = true
      bloco_1( );
   } // fim se
   // condicao = false
   
   Pseudocódigo
   
   se ( condicao ) então
      // condicao = verdadeiro 
      bloco_1( );
   fim_se
   
   Diagrama estruturado
    __________________________ 
   |        |   |             |
   | teste? | V | bloco_1( ); |
   |________|___|_____________|
   
2. Duplas

   C/C++
   
   if ( condicao )
   { // condicao = true
     bloco_1( );
   } // fim do primeiro bloco
   else
   { // condicao = false
     bloco_2( );
   } // fim se

   Pseudocódigo
   
   se ( condicao ) então
      // condicao = verdadeiro 
      bloco_1( );
   senão
      // condicao = falso
      bloco_2( );
   fim_se
   
   Diagrama estruturado
    __________________________ 
   |        |   |             |
   |        | V | bloco_1( ); |
   | teste? |___|_____________|
   |        |   |             |
   |        | F | bloco_2( ); |
   |________|___|_____________|

3. Múltiplas

   C/C++
   
   // com alternativas simples
   if ( opcao==valor_1 )
   {  // condicao = true
      bloco_1( );
   } // fim se
   if ( opcao==valor_2 )
   {  // condicao = true
      bloco_2( );
   } // fim se
   if ( opcao==valor_3 )
   {  // condicao = true
      bloco_3( );
   } // fim se
   if ( ! ( opcao==valor_1 &&
            opcao==valor_2 &&
            opcao==valor_3 ) ) 
      /* diferente de todas as outras ... */ )
   {  // condicao = true
      bloco_n( );
   } // fim se

   
   C/C++
   
   // com alternativas duplas
   if ( opcao==valor_1 )
   {  // condicao = true
      bloco_1( );
   }
   else
   {
      if ( opcao==valor_2 )
      {  // condicao = true
         bloco_2( );
      }
      else
      {  
         if ( opcao==valor_3 )
         {  // condicao = true
            bloco_3( );
         }
         else
         {  // se nao for igual a outro caso ja' testado
            // condicao = false
               bloco_n( );
         } // fim se (3)
      } // fim se (2)
   } // fim se (1)

   C/C++
   
   // com comparacoes em relacao 'a igualdade
   switch ( opcao )
   {
     case valor_1:
     {
       bloco_1( );
     }
       break; // separador
     case valor_2:
       bloco_2( );
       break; // separador
     case valor_3:
       bloco_2( );
       break; // separador
     default: // opcional
       bloco_n( );
       break;
   } // fim escolha
   
   Pseudocódigo
   
   escolher ( opcao ) 
    caso 1: 
      bloco_1( );
    caso 2: 
      bloco_2( );
    caso 3: 
      bloco_3( );
    outro: // opcional
      bloco_n( );
   fim_escolher

   Diagrama estruturado
    _________________________ 
   |       |   |             |
   |       | 1 | bloco_1( ); |
   |       |___|_____________|
   |       |   |             |
   |       | 2 | bloco_2( ); |
   | opção |___|_____________|
   |       |   |             |
   |       | 3 | bloco_3( ); |
   |       |___|_____________|
   |       |   |             |
   |       | n | bloco_n( ); |
   |_______|___|_____________|

 Casos especiais
 
   // Reducao a alternativa simples
   switch ( opcao==valor )
   {
     case true: bloco_1( );
      break;
   } // end switch
 
   // Reducao a alternativa dupla
   switch ( opcao==valor )
   {
     case true: bloco_1( );
      break;
     default  : bloco_2( );
      break;
   } // end switch


Condições combinadas

// teste para dentro de intervalo   // teste para intervalo (alternativa)
if ( 1.0 <= x && x <= 10.0 )        if ( 1.0 <= x AND x <= 10.0 )

// x pertence [ 1.0 : 10.0 ]
// x >= 1.0 e x <= 10.0

// teste para fora   de intervalo   // teste para intervalo (alternativa)
if ( x < 1.0  || 10.0 < x )         if ( x < 1.0   OR  10.0 < x )

// x NÃO pertence [ 1.0 : 10.0 ]


// teste para combinar letras
char x = '0';
bool minuscula=('a' <= x && x <= 'z'); 
bool maiuscula=('A' <= x && x <= 'Z');

if ( minuscula || maiuscula )
{
   printf ( "\nletra" );
} // end if


// teste para combinar condicoes distintas
if ( p == 15 && q < 2.5 )
{
   printf ( "\nCondicao satisfeita"     ); 
}
else
{
   printf ( "\nCondicao nao satisfeita" );     
} // end if

OBS.:

// ERRADO:  'a' <= x  <= 'z'
//          ('a'<= x) <= 'z' <- na ordem da esquerda para a direita
//            (0|1)   <= 'z' <- comparar o resultado lógico com letra
//                     1     =  true

// conclusão: SEMPRE verdadeiro para qualquer valor de x

// ---

Repetições

1. Com teste no início (preventiva -> [0:n])
   // OBS.: Pode não executar sequer 1 vez
   
   C/C++
   
   while ( condicao )
   {  // condicao = true
      bloco_1( );
   } // fim repetir
   // condicao = false
   
   Pseudocódigo
   
   repetir_enquanto ( condicao )
      // condicao = verdadeiro 
      bloco_1( );
   fim_repetir
   
   Diagrama estruturado
    __________________________ 
   | teste?                   |
   |         _________________|
   |        | // verdadeiro   |
   |        | bloco_1( );     |
   |________|_________________|
    // falso
   
   Com teste no início e variação

   int controle = 0;                   int controle = 1;          
   while ( controle < vezes )          while ( controle <= vezes )
   {  // condicao = true               {  // condicao = true
      bloco_1( );                         bloco_1( );
      // passar ao proximo                // passar ao proximo
      controle = controle + 1;            controle = controle + 1;
   } // fim repetir                    } // fim repetir
   // condicao = false                 // condicao = false
   
   for ( controle = 0;                 for ( controle = 1;            
         controle < vezes;                   controle <= vezes;
         controle = controle + 1 )           controle = controle + 1 )
   {  // condicao = true               {  // condicao = true
      bloco_1( );                         bloco_1( );        
   } // fim repetir                    } // fim repetir
   
   int controle = vezes-1;             int controle = vezes;          
   while ( controle >= 0 )             while ( controle >= 1 )
   {  // condicao = true               {  // condicao = true
      bloco_1( );                         bloco_1( );
      // passar ao proximo                // passar ao proximo
      controle = controle - 1;            controle = controle - 1;
   } // fim repetir                    } // fim repetir
   // condicao = false                 // condicao = false
   
   for ( controle = vezes-1;           for ( controle = vezes;            
         controle >= 0;                      controle >= 1;
         controle = controle - 1 )           controle = controle - 1 )
   {  // condicao = true               {  // condicao = true
      bloco_1( );                         bloco_1( );        
   } // fim repetir                    } // fim repetir
   
   OBS.: A variação pode ser diferente de (-1) ou de (+1).
   
2. Com teste no fim (corretiva: [1:n]) 
   // OBS.: Permitido executar pelo menos 1 vez
   
   C/C++
   
   do
   {  // condicao = true
      bloco_1( );
   } 
   while ( condicao ); // OBS: Separador OBRIGATORIO
   // condicao = false
   
   Pseudocódigo
   
   repetir_enquanto ( condicao )
      // condicao = verdadeiro 
      bloco_1( );
   fim_repetir
   
   Diagrama estruturado
    __________________________ 
   |        | // verdadeiro   |
   |        | bloco_1( );     |
   |        |_________________|
   | teste?                   |
   |__________________________|
    // falso
    
___


